-- ######### START BILLS TABLE ######### --
CREATE TABLE IF NOT EXISTS public.bills
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active_revision bigint,
    primary_sponsor bigint,
    status jsonb,
    description text COLLATE pg_catalog."default",
    external_id text COLLATE pg_catalog."default",
    session_id text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT bills_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.bills
    OWNER to postgres;

GRANT ALL ON TABLE public.bills TO anon;

GRANT ALL ON TABLE public.bills TO authenticated;

GRANT ALL ON TABLE public.bills TO postgres;

GRANT ALL ON TABLE public.bills TO service_role;
-- ######### END BILLS TABLE ######### --

-- ######### START SPONSORS TABLE ######### --
CREATE TABLE IF NOT EXISTS public.sponsors
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    first_name text COLLATE pg_catalog."default",
    last_name text COLLATE pg_catalog."default",
    middle_name text COLLATE pg_catalog."default",
    party text COLLATE pg_catalog."default",
    profile_link text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT sponsors_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.sponsors
    OWNER to postgres;

GRANT ALL ON TABLE public.sponsors TO anon;

GRANT ALL ON TABLE public.sponsors TO authenticated;

GRANT ALL ON TABLE public.sponsors TO postgres;

GRANT ALL ON TABLE public.sponsors TO service_role;
-- ######### END SPONSORS TABLE ######### --

-- ######### START REVISIONS TABLE ######### --
CREATE TABLE IF NOT EXISTS public.revisions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    printer_no bigint,
    external_link text COLLATE pg_catalog."default",
    full_text text COLLATE pg_catalog."default",
    published_on timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT revisions_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.revisions
    OWNER to postgres;

GRANT ALL ON TABLE public.revisions TO anon;

GRANT ALL ON TABLE public.revisions TO authenticated;

GRANT ALL ON TABLE public.revisions TO postgres;

GRANT ALL ON TABLE public.revisions TO service_role;
-- ######### END REVISIONS TABLE ######### --

-- ######### START REVISIONS_BILLS TABLE ######### --

CREATE TABLE IF NOT EXISTS public.revisions_bills
(
    revision bigint NOT NULL,
    bill bigint NOT NULL,
    CONSTRAINT revisions_bills_pkey PRIMARY KEY (revision, bill),
    CONSTRAINT revisions_bills_bill_fkey FOREIGN KEY (bill)
        REFERENCES public.bills (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT revisions_bills_revision_fkey FOREIGN KEY (revision)
        REFERENCES public.revisions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.revisions_bills
    OWNER to postgres;

GRANT ALL ON TABLE public.revisions_bills TO anon;

GRANT ALL ON TABLE public.revisions_bills TO authenticated;

GRANT ALL ON TABLE public.revisions_bills TO postgres;

GRANT ALL ON TABLE public.revisions_bills TO service_role;
-- ######### END REVISIONS_BILLS TABLE ######### --

-- ######### START SUMMARIES TABLE ######### --
CREATE TABLE IF NOT EXISTS public.summaries
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    revision bigint,
    summary text COLLATE pg_catalog."default",
    is_reviewed boolean DEFAULT false,
    is_reported boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT summaries_pkey PRIMARY KEY (id),
    CONSTRAINT summaries_revision_fkey FOREIGN KEY (revision)
        REFERENCES public.revisions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.summaries
    OWNER to postgres;

GRANT ALL ON TABLE public.summaries TO anon;

GRANT ALL ON TABLE public.summaries TO authenticated;

GRANT ALL ON TABLE public.summaries TO postgres;

GRANT ALL ON TABLE public.summaries TO service_role;
-- ######### END SUMMARIES TABLE ######### --

-- ######### START TAGS TABLE ######### --
CREATE TABLE IF NOT EXISTS public.tags
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    text text COLLATE pg_catalog."default",
    slug text COLLATE pg_catalog."default",
    CONSTRAINT tags_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tags
    OWNER to postgres;

GRANT ALL ON TABLE public.tags TO anon;

GRANT ALL ON TABLE public.tags TO authenticated;

GRANT ALL ON TABLE public.tags TO postgres;

GRANT ALL ON TABLE public.tags TO service_role;
-- ######### END TAGS TABLE ######### --

-- ### START BILLS CONSTRAINTS ### --
ALTER TABLE IF EXISTS public.bills
    ADD CONSTRAINT bills_active_revision_fkey FOREIGN KEY (active_revision)
        REFERENCES public.revisions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    ADD CONSTRAINT bills_primary_sponsor_fkey FOREIGN KEY (primary_sponsor)
        REFERENCES public.sponsors (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
-- ### END BILLS CONSTRAINTS ### --

-- #################### JUNCTION TABLES #################### --

-- ######### START BILLS_TAGS TABLE ######### --
CREATE TABLE IF NOT EXISTS public.bills_tags
(
    bill bigint NOT NULL,
    tag bigint NOT NULL,
    CONSTRAINT bills_tags_pkey PRIMARY KEY (bill, tag),
    CONSTRAINT bills_tags_bill_fkey FOREIGN KEY (bill)
        REFERENCES public.bills (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT bills_tags_tag_fkey FOREIGN KEY (tag)
        REFERENCES public.tags (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.bills_tags
    OWNER to postgres;

GRANT ALL ON TABLE public.bills_tags TO anon;

GRANT ALL ON TABLE public.bills_tags TO authenticated;

GRANT ALL ON TABLE public.bills_tags TO postgres;

GRANT ALL ON TABLE public.bills_tags TO service_role;
-- ######### END BILLS_TAGS TABLE ######### --

-- ########## START BILLS_SPONSORS TABLE ########## --
CREATE TABLE IF NOT EXISTS public.bills_sponsors
(
    bill bigint NOT NULL,
    sponsor bigint NOT NULL,
    CONSTRAINT bills_sponsors_pkey PRIMARY KEY (bill, sponsor),
    CONSTRAINT bills_sponsors_bill_fkey FOREIGN KEY (bill)
        REFERENCES public.bills (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT bills_sponsors_sponsor_fkey FOREIGN KEY (sponsor)
        REFERENCES public.sponsors (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.bills_sponsors
    OWNER to postgres;

GRANT ALL ON TABLE public.bills_sponsors TO authenticated;

GRANT ALL ON TABLE public.bills_sponsors TO anon;

GRANT ALL ON TABLE public.bills_sponsors TO service_role;

GRANT ALL ON TABLE public.bills_sponsors TO postgres;
-- ########## END BILLS_SPONSORS TABLE ########## --

-- #################### TRIGGERS #################### --

-- ########## UPDATED AT TRIGGER ########## --
CREATE OR REPLACE FUNCTION update_modified_column()   
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;   
END;
$$ language 'plpgsql';

CREATE OR REPLACE TRIGGER bills_updated_at BEFORE UPDATE ON public.bills FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
CREATE OR REPLACE TRIGGER revisions_updated_at BEFORE UPDATE ON public.revisions FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
CREATE OR REPLACE TRIGGER summaries_updated_at BEFORE UPDATE ON public.summaries FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
CREATE OR REPLACE TRIGGER sponsors_updated_at BEFORE UPDATE ON public.sponsors FOR EACH ROW EXECUTE PROCEDURE update_modified_column();

-- ########## END UPDATED AT TRIGGER ########## --

-- #################### VIEWS #################### --
-- Views allow us to query the database in a more readable way, and 
-- also allow us to hide the complexity of the joins necessary to
-- get the data we want.

-- ########## START BILL DATA VIEW ########## --
CREATE OR REPLACE VIEW public.bill_data AS 
SELECT DISTINCT 
    b.id, 
    b.external_id AS "bill-number",
    b.title,
    r.external_link AS "link",
    b.description,
    b.status,
    INITCAP(CONCAT(s.first_name, ' ', s.last_name, ' (', s.party, ')')) AS "primary-sponsor", 
    array_agg(DISTINCT INITCAP(CONCAT(cs.first_name, ' ', cs.last_name, ' (', s.party, ')'))) AS "co-sponsors",
    array_agg(DISTINCT t.text) AS tags
FROM bills b
JOIN bills_tags bt ON b.id = bt.bill
JOIN revisions r ON b.active_revision = r.id
JOIN sponsors s ON b.primary_sponsor = s.id
JOIN bills_sponsors bs ON b.id = bs.bill
INNER JOIN sponsors cs ON bs.sponsor = cs.id
JOIN tags t ON bt.tag = t.id
GROUP BY bt.bill, b.id, s.last_name, s.first_name, s.party, r.external_link;